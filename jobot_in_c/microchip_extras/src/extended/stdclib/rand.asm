; RCS Header $Id: rand.asm,v 1.5 2009/05/12 10:56:29 guptan Exp $

#include "P18CXXX.INC"
#include "P18MACRO.INC"

; @name rand
;The {\bf rand} function generates a sequence of pseudo-random integer
;values in the range [0,32767].
;The implementation shall behave as if no library function calls {\bf rand}.
;
; int rand (void);


; @name srand
;The {\bf srand} function sets the starting seed for the pseudo-random
;number sequence generated by the {\bf rand} function. If {\bf srand} is
;called again with the same seed value, the same sequence of value shall
;be returned by {\bf rand}. If {\bf rand} is called without {\bf srand}
;having first been called, the pseudo-random sequence of numbers generated
;shall be the same as if {\bf srand} had been called with a seed value
;of 1.
; The implementation shall behave as if no library function calls {\bf srand}.
;
; void srand (unsigned int seed);


          extern  __mul16
                    
SEED_DATA IDATA
Seed      DB      1,0


STDLIB CODE
srand    FUSTART
  global srand

          Stk2CpyToReg -2,Seed          ; transfer argument to Seed
          FUEND
          return


rand     FUSTART
  global rand

          movlw	 0x35
          stkadj    1                    ; added STKADJ PSEUDO-INSTRUCTION for stack analysis
          movwf	 POSTINC1
          movlw	 0x45
          stkadj    1                    ; added STKADJ PSEUDO-INSTRUCTION for stack analysis
          movwf	 POSTINC1

          stkadj    1                    ; added STKADJ PSEUDO-INSTRUCTION for stack analysis
          movff  Seed, POSTINC1
          stkadj    1                    ; added STKADJ PSEUDO-INSTRUCTION for stack analysis
          movff  Seed+1, POSTINC1

          call	 __mul16

          stkadj    -1                    ; added STKADJ PSEUDO-INSTRUCTION for stack analysis
          movf   POSTDEC1, 1, 0
          stkadj    -1                    ; added STKADJ PSEUDO-INSTRUCTION for stack analysis
          movff  POSTDEC1, Seed+1
          movff  INDF1, Seed

          banksel Seed     ; SSR C18-297
          incf   Seed, F
          clrf	 WREG
          addwfc Seed+1, F

          bcf    Seed+1, 7            ; limit range to 0 -> 32767
	  
	  movff  Seed, PRODL
	  movff  Seed+1, PRODH
	 
          FUEND
          return

          end

